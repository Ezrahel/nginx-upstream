# Nginx template for Blue/Green deployment with observability
# Placeholders __PRIMARY_HOST__, __BACKUP_HOST__, __APP_PORT__ are replaced by entrypoint.sh

user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    sendfile        on;
    keepalive_timeout  65;
    
    # Structured JSON access log format for observability
    # Captures: pool identity, release version, upstream status, timing metrics
    log_format json_combined escape=json '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"pool":"$upstream_http_x_app_pool",'
        '"release":"$upstream_http_x_release_id",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_connect_time":"$upstream_connect_time",'
        '"upstream_header_time":"$upstream_header_time"'
    '}';
    
    access_log  /var/log/nginx/access.log  json_combined;
    
    # Upstream pool definition
    # Primary server is the active pool (blue or green based on ACTIVE_POOL env)
    # Backup server provides automatic failover
    upstream app_upstream {
        # Primary server: fast failure detection
        # max_fails=1: Mark as down after 1 failure
        # fail_timeout=2s: Try again after 2 seconds
        server __PRIMARY_HOST__:__APP_PORT__ max_fails=1 fail_timeout=2s;
        
        # Backup server: only used when primary is down
        server __BACKUP_HOST__:__APP_PORT__ backup;
        
        # Keep connections alive to reduce overhead
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }
    
    # Main application server
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Main application location
        location / {
            proxy_pass http://app_upstream;
            
            # Timeouts tuned for quick failover
            proxy_connect_timeout 1s;      # Connection timeout
            proxy_send_timeout 5s;         # Timeout for sending request
            proxy_read_timeout 5s;         # Timeout for reading response
            
            # Failover behavior
            # Retry on: connection errors, timeouts, and 5xx errors
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;        # Try primary + backup
            proxy_next_upstream_timeout 6s;     # Total timeout for retries
            
            # Preserve client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Buffer settings for better performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Don't hide upstream headers (we need X-App-Pool and X-Release-Id)
            # These headers are read for logging purposes
        }
        
        # Health check endpoint
        location = /healthz {
            proxy_pass http://app_upstream/healthz;
            proxy_connect_timeout 1s;
            proxy_read_timeout 2s;
            proxy_send_timeout 2s;
            
            # Don't retry health checks
            proxy_next_upstream off;
            
            # Minimal headers for health check
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Don't log health checks (optional - uncomment to disable logging)
            # access_log off;
        }
        
        # Nginx status endpoint (optional - for monitoring)
        location = /nginx-status {
            stub_status on;
            access_log off;
            
            # Restrict access (uncomment and adjust for production)
            # allow 127.0.0.1;
            # allow 172.16.0.0/12;  # Docker networks
            # deny all;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # Optional: Separate server block for direct pool access (debugging)
    # Uncomment to enable direct access to each pool
    # server {
    #     listen 8081;
    #     server_name _;
    #     
    #     location / {
    #         proxy_pass http://__PRIMARY_HOST__:__APP_PORT__;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #     }
    # }
    # 
    # server {
    #     listen 8082;
    #     server_name _;
    #     
    #     location / {
    #         proxy_pass http://__BACKUP_HOST__:__APP_PORT__;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #     }
    # }
}